{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nimport { bodyRegExps, namedReferences } from './named-references.js';\nimport { numericUnicodeMap } from './numeric-unicode-map.js';\nimport { fromCodePoint, getCodePoint } from './surrogate-pairs.js';\n\nvar allNamedReferences = __assign(__assign({}, namedReferences), {\n  all: namedReferences.html5\n});\n\nvar encodeRegExps = {\n  specialChars: /[<>'\"&]/g,\n  nonAscii: /[<>'\"&\\u0080-\\uD7FF\\uE000-\\uFFFF\\uDC00-\\uDFFF]|[\\uD800-\\uDBFF][\\uDC00-\\uDFFF]?/g,\n  nonAsciiPrintable: /[<>'\"&\\x01-\\x08\\x11-\\x15\\x17-\\x1F\\x7f-\\uD7FF\\uE000-\\uFFFF\\uDC00-\\uDFFF]|[\\uD800-\\uDBFF][\\uDC00-\\uDFFF]?/g,\n  nonAsciiPrintableOnly: /[\\x01-\\x08\\x11-\\x15\\x17-\\x1F\\x7f-\\uD7FF\\uE000-\\uFFFF\\uDC00-\\uDFFF]|[\\uD800-\\uDBFF][\\uDC00-\\uDFFF]?/g,\n  extensive: /[\\x01-\\x0c\\x0e-\\x1f\\x21-\\x2c\\x2e-\\x2f\\x3a-\\x40\\x5b-\\x60\\x7b-\\x7d\\x7f-\\uD7FF\\uE000-\\uFFFF\\uDC00-\\uDFFF]|[\\uD800-\\uDBFF][\\uDC00-\\uDFFF]?/g\n};\nvar defaultEncodeOptions = {\n  mode: 'specialChars',\n  level: 'all',\n  numeric: 'decimal'\n};\n/** Encodes all the necessary (specified by `level`) characters in the text */\n\nexport function encode(text, _a) {\n  var _b = _a === void 0 ? defaultEncodeOptions : _a,\n      _c = _b.mode,\n      mode = _c === void 0 ? 'specialChars' : _c,\n      _d = _b.numeric,\n      numeric = _d === void 0 ? 'decimal' : _d,\n      _e = _b.level,\n      level = _e === void 0 ? 'all' : _e;\n\n  if (!text) {\n    return '';\n  }\n\n  var encodeRegExp = encodeRegExps[mode];\n  var references = allNamedReferences[level].characters;\n  var isHex = numeric === 'hexadecimal';\n  return String.prototype.replace.call(text, encodeRegExp, function (input) {\n    var result = references[input];\n\n    if (!result) {\n      var code = input.length > 1 ? getCodePoint(input, 0) : input.charCodeAt(0);\n      result = (isHex ? '&#x' + code.toString(16) : '&#' + code) + ';';\n    }\n\n    return result;\n  });\n}\nvar defaultDecodeOptions = {\n  scope: 'body',\n  level: 'all'\n};\nvar strict = /&(?:#\\d+|#[xX][\\da-fA-F]+|[0-9a-zA-Z]+);/g;\nvar attribute = /&(?:#\\d+|#[xX][\\da-fA-F]+|[0-9a-zA-Z]+)[;=]?/g;\nvar baseDecodeRegExps = {\n  xml: {\n    strict: strict,\n    attribute: attribute,\n    body: bodyRegExps.xml\n  },\n  html4: {\n    strict: strict,\n    attribute: attribute,\n    body: bodyRegExps.html4\n  },\n  html5: {\n    strict: strict,\n    attribute: attribute,\n    body: bodyRegExps.html5\n  }\n};\n\nvar decodeRegExps = __assign(__assign({}, baseDecodeRegExps), {\n  all: baseDecodeRegExps.html5\n});\n\nvar fromCharCode = String.fromCharCode;\nvar outOfBoundsChar = fromCharCode(65533);\nvar defaultDecodeEntityOptions = {\n  level: 'all'\n};\n\nfunction getDecodedEntity(entity, references, isAttribute, isStrict) {\n  var decodeResult = entity;\n  var decodeEntityLastChar = entity[entity.length - 1];\n\n  if (isAttribute && decodeEntityLastChar === '=') {\n    decodeResult = entity;\n  } else if (isStrict && decodeEntityLastChar !== ';') {\n    decodeResult = entity;\n  } else {\n    var decodeResultByReference = references[entity];\n\n    if (decodeResultByReference) {\n      decodeResult = decodeResultByReference;\n    } else if (entity[0] === '&' && entity[1] === '#') {\n      var decodeSecondChar = entity[2];\n      var decodeCode = decodeSecondChar == 'x' || decodeSecondChar == 'X' ? parseInt(entity.substr(3), 16) : parseInt(entity.substr(2));\n      decodeResult = decodeCode >= 0x10ffff ? outOfBoundsChar : decodeCode > 65535 ? fromCodePoint(decodeCode) : fromCharCode(numericUnicodeMap[decodeCode] || decodeCode);\n    }\n  }\n\n  return decodeResult;\n}\n/** Decodes a single entity */\n\n\nexport function decodeEntity(entity, _a) {\n  var _b = _a === void 0 ? defaultDecodeEntityOptions : _a,\n      _c = _b.level,\n      level = _c === void 0 ? 'all' : _c;\n\n  if (!entity) {\n    return '';\n  }\n\n  return getDecodedEntity(entity, allNamedReferences[level].entities, false, false);\n}\n/** Decodes all entities in the text */\n\nexport function decode(text, _a) {\n  var _b = _a === void 0 ? defaultDecodeOptions : _a,\n      _c = _b.level,\n      level = _c === void 0 ? 'all' : _c,\n      _d = _b.scope,\n      scope = _d === void 0 ? level === 'xml' ? 'strict' : 'body' : _d;\n\n  if (!text) {\n    return '';\n  }\n\n  var decodeRegExp = decodeRegExps[level][scope];\n  var references = allNamedReferences[level].entities;\n  var isAttribute = scope === 'attribute';\n  var isStrict = scope === 'strict';\n  return text.replace(decodeRegExp, function (entity) {\n    return getDecodedEntity(entity, references, isAttribute, isStrict);\n  });\n}","map":{"version":3,"sources":["/Users/abdullasaleh/Bank-of-React/node_modules/html-entities/src/index.ts"],"names":[],"mappings":"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","sourcesContent":["import {bodyRegExps, namedReferences} from './named-references.js';\nimport {numericUnicodeMap} from './numeric-unicode-map.js';\nimport {fromCodePoint, getCodePoint} from './surrogate-pairs.js';\n\nconst allNamedReferences = {\n    ...namedReferences,\n    all: namedReferences.html5\n};\n\nexport type Level = 'xml' | 'html4' | 'html5' | 'all';\n\ninterface CommonOptions {\n    level?: Level;\n}\n\nexport type EncodeMode = 'specialChars' | 'nonAscii' | 'nonAsciiPrintable' | 'nonAsciiPrintableOnly' | 'extensive';\n\nexport interface EncodeOptions extends CommonOptions {\n    mode?: EncodeMode;\n    numeric?: 'decimal' | 'hexadecimal';\n}\n\nexport type DecodeScope = 'strict' | 'body' | 'attribute';\n\nexport interface DecodeOptions extends CommonOptions {\n    scope?: DecodeScope;\n}\n\nconst encodeRegExps: Record<EncodeMode, RegExp> = {\n    specialChars: /[<>'\"&]/g,\n    nonAscii: /[<>'\"&\\u0080-\\uD7FF\\uE000-\\uFFFF\\uDC00-\\uDFFF]|[\\uD800-\\uDBFF][\\uDC00-\\uDFFF]?/g,\n    nonAsciiPrintable: /[<>'\"&\\x01-\\x08\\x11-\\x15\\x17-\\x1F\\x7f-\\uD7FF\\uE000-\\uFFFF\\uDC00-\\uDFFF]|[\\uD800-\\uDBFF][\\uDC00-\\uDFFF]?/g,\n    nonAsciiPrintableOnly: /[\\x01-\\x08\\x11-\\x15\\x17-\\x1F\\x7f-\\uD7FF\\uE000-\\uFFFF\\uDC00-\\uDFFF]|[\\uD800-\\uDBFF][\\uDC00-\\uDFFF]?/g,\n    extensive: /[\\x01-\\x0c\\x0e-\\x1f\\x21-\\x2c\\x2e-\\x2f\\x3a-\\x40\\x5b-\\x60\\x7b-\\x7d\\x7f-\\uD7FF\\uE000-\\uFFFF\\uDC00-\\uDFFF]|[\\uD800-\\uDBFF][\\uDC00-\\uDFFF]?/g\n};\n\nconst defaultEncodeOptions: EncodeOptions = {\n    mode: 'specialChars',\n    level: 'all',\n    numeric: 'decimal'\n};\n\n/** Encodes all the necessary (specified by `level`) characters in the text */\nexport function encode(\n    text: string | undefined | null,\n    {mode = 'specialChars', numeric = 'decimal', level = 'all'}: EncodeOptions = defaultEncodeOptions\n) {\n    if (!text) {\n        return '';\n    }\n\n    const encodeRegExp = encodeRegExps[mode];\n    const references = allNamedReferences[level].characters;\n    const isHex = numeric === 'hexadecimal';\n\n    return String.prototype.replace.call(text, encodeRegExp, (input) => {\n        let result = references[input];\n        if (!result) {\n            const code = input.length > 1 ? getCodePoint(input, 0)! : input.charCodeAt(0);\n            result = (isHex ? '&#x' + code.toString(16) : '&#' + code) + ';';\n        }\n        return result;\n    });\n}\n\nconst defaultDecodeOptions: DecodeOptions = {\n    scope: 'body',\n    level: 'all'\n};\n\nconst strict = /&(?:#\\d+|#[xX][\\da-fA-F]+|[0-9a-zA-Z]+);/g;\nconst attribute = /&(?:#\\d+|#[xX][\\da-fA-F]+|[0-9a-zA-Z]+)[;=]?/g;\n\nconst baseDecodeRegExps: Record<Exclude<Level, 'all'>, Record<DecodeScope, RegExp>> = {\n    xml: {\n        strict,\n        attribute,\n        body: bodyRegExps.xml\n    },\n    html4: {\n        strict,\n        attribute,\n        body: bodyRegExps.html4\n    },\n    html5: {\n        strict,\n        attribute,\n        body: bodyRegExps.html5\n    }\n};\n\nconst decodeRegExps: Record<Level, Record<DecodeScope, RegExp>> = {\n    ...baseDecodeRegExps,\n    all: baseDecodeRegExps.html5\n};\n\nconst fromCharCode = String.fromCharCode;\nconst outOfBoundsChar = fromCharCode(65533);\n\nconst defaultDecodeEntityOptions: CommonOptions = {\n    level: 'all'\n};\n\nfunction getDecodedEntity(\n    entity: string,\n    references: Record<string, string>,\n    isAttribute: boolean,\n    isStrict: boolean\n): string {\n    let decodeResult = entity;\n    const decodeEntityLastChar = entity[entity.length - 1];\n    if (isAttribute && decodeEntityLastChar === '=') {\n        decodeResult = entity;\n    } else if (isStrict && decodeEntityLastChar !== ';') {\n        decodeResult = entity;\n    } else {\n        const decodeResultByReference = references[entity];\n        if (decodeResultByReference) {\n            decodeResult = decodeResultByReference;\n        } else if (entity[0] === '&' && entity[1] === '#') {\n            const decodeSecondChar = entity[2];\n            const decodeCode =\n                decodeSecondChar == 'x' || decodeSecondChar == 'X'\n                    ? parseInt(entity.substr(3), 16)\n                    : parseInt(entity.substr(2));\n\n            decodeResult =\n                decodeCode >= 0x10ffff\n                    ? outOfBoundsChar\n                    : decodeCode > 65535\n                    ? fromCodePoint(decodeCode)\n                    : fromCharCode(numericUnicodeMap[decodeCode] || decodeCode);\n        }\n    }\n    return decodeResult;\n}\n\n/** Decodes a single entity */\nexport function decodeEntity(\n    entity: string | undefined | null,\n    {level = 'all'}: CommonOptions = defaultDecodeEntityOptions\n): string {\n    if (!entity) {\n        return '';\n    }\n    return getDecodedEntity(entity, allNamedReferences[level].entities, false, false);\n}\n\n/** Decodes all entities in the text */\nexport function decode(\n    text: string | undefined | null,\n    {level = 'all', scope = level === 'xml' ? 'strict' : 'body'}: DecodeOptions = defaultDecodeOptions\n) {\n    if (!text) {\n        return '';\n    }\n\n    const decodeRegExp = decodeRegExps[level][scope];\n    const references = allNamedReferences[level].entities;\n    const isAttribute = scope === 'attribute';\n    const isStrict = scope === 'strict';\n\n    return text.replace(decodeRegExp, (entity) => getDecodedEntity(entity, references, isAttribute, isStrict));\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}