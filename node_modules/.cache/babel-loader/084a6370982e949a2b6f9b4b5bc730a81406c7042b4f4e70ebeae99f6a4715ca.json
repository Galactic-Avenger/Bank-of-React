{"ast":null,"code":"export var fromCodePoint = String.fromCodePoint || function (astralCodePoint) {\n  return String.fromCharCode(Math.floor((astralCodePoint - 0x10000) / 0x400) + 0xd800, (astralCodePoint - 0x10000) % 0x400 + 0xdc00);\n}; // @ts-expect-error - String.prototype.codePointAt might not exist in older node versions\n\nexport var getCodePoint = String.prototype.codePointAt ? function (input, position) {\n  return input.codePointAt(position);\n} : function (input, position) {\n  return (input.charCodeAt(position) - 0xd800) * 0x400 + input.charCodeAt(position + 1) - 0xdc00 + 0x10000;\n};\nexport var highSurrogateFrom = 0xd800;\nexport var highSurrogateTo = 0xdbff;","map":{"version":3,"sources":["/Users/abdullasaleh/Bank-of-React/node_modules/html-entities/src/surrogate-pairs.ts"],"names":[],"mappings":"AAAA,OAAO,IAAM,aAAa,GACtB,MAAM,CAAC,aAAP,IACA,UAAU,eAAV,EAAiC;AAC7B,SAAO,MAAM,CAAC,YAAP,CACH,IAAI,CAAC,KAAL,CAAW,CAAC,eAAe,GAAG,OAAnB,IAA8B,KAAzC,IAAkD,MAD/C,EAEF,CAAC,eAAe,GAAG,OAAnB,IAA8B,KAA/B,GAAwC,MAFrC,CAAP;AAIH,CAPE,C,CASP;;AACA,OAAO,IAAM,YAAY,GAAG,MAAM,CAAC,SAAP,CAAiB,WAAjB,GACtB,UAAU,KAAV,EAAyB,QAAzB,EAAyC;AACrC,SAAO,KAAK,CAAC,WAAN,CAAkB,QAAlB,CAAP;AACH,CAHqB,GAItB,UAAU,KAAV,EAAyB,QAAzB,EAAyC;AACrC,SAAO,CAAC,KAAK,CAAC,UAAN,CAAiB,QAAjB,IAA6B,MAA9B,IAAwC,KAAxC,GAAgD,KAAK,CAAC,UAAN,CAAiB,QAAQ,GAAG,CAA5B,CAAhD,GAAiF,MAAjF,GAA0F,OAAjG;AACH,CANA;AAQP,OAAO,IAAM,iBAAiB,GAAG,MAA1B;AACP,OAAO,IAAM,eAAe,GAAG,MAAxB","sourcesContent":["export const fromCodePoint =\n    String.fromCodePoint ||\n    function (astralCodePoint: number) {\n        return String.fromCharCode(\n            Math.floor((astralCodePoint - 0x10000) / 0x400) + 0xd800,\n            ((astralCodePoint - 0x10000) % 0x400) + 0xdc00\n        );\n    };\n\n// @ts-expect-error - String.prototype.codePointAt might not exist in older node versions\nexport const getCodePoint = String.prototype.codePointAt\n    ? function (input: string, position: number) {\n          return input.codePointAt(position);\n      }\n    : function (input: string, position: number) {\n          return (input.charCodeAt(position) - 0xd800) * 0x400 + input.charCodeAt(position + 1) - 0xdc00 + 0x10000;\n      };\n\nexport const highSurrogateFrom = 0xd800;\nexport const highSurrogateTo = 0xdbff;\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}